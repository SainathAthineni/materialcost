# -*- coding: utf-8 -*-
"""appmaterialcost

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xICSaKnEi3sl0HTaW2QP9mTugOhen6TP
"""

"pip install Flask SQLAlchemy requests streamlit"

"pip install flask_sqlalchemy"

from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///materials.db'
db = SQLAlchemy(app)

class Material(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    cost = db.Column(db.Float, nullable=False)

    def __repr__(self):
        return f"<Material {self.name}>"

# Initialize the database
with app.app_context():
    db.create_all()

@app.route('/add_material', methods=['POST'])
def add_material():
    data = request.get_json()
    name = data.get('name')
    cost = data.get('cost')

    if not name or cost is None:
        return jsonify({"error": "Name and cost are required"}), 400

    # Check if the material already exists
    material = Material.query.filter_by(name=name).first()
    
    if material:
        # If material exists, update its cost
        material.cost = cost
        db.session.commit()
        return jsonify({"message": f"Cost of '{name}' updated to {cost}"}), 200
    else:
        # If material does not exist, add a new entry
        new_material = Material(name=name, cost=cost)
        db.session.add(new_material)
        db.session.commit()
        return jsonify({"message": f"Material '{name}' added successfully with cost {cost}"}), 201
    
@app.route('/get_material_cost', methods=['GET'])
def get_material_cost():
    name = request.args.get('name')
    material = Material.query.filter_by(name=name).first()

    if material:
        return jsonify({"name": material.name, "cost": material.cost}), 200
    else:
        return jsonify({"error": "Material not found"}), 404
    
if __name__ == '__main__':
    app.run(debug=True)